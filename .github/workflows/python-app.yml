# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Playwright Tests
on:
  push:
    branches: [ main, master ] 
  pull_request:
    branches: [ main, master ]
jobs:
  playwright:
    name: 'Playwright Tests'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright/python:v%%VERSION%%-jammy
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r local-requirements.txt
          pip install -e .
      - name: Run your tests
        run: pytest
        env:
          HOME: /root
Key Sections
name: Specifies the name of the workflow.
on: Defines the events that trigger the workflow, such as push or pull_request.
jobs: Contains the jobs to be executed. Each job runs in a fresh instance of the virtual environment.
steps: Lists the steps to be executed in the job, such as checking out the code, setting up the environment, installing dependencies, and running tests.
Using Different Languages
Playwright supports multiple programming languages. Here are examples for Python and Java:

Python Example
name: Python Playwright Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
jobs:
  test:
    
    runs-on: ubuntu-latest
    
    steps:
	
      - name: Checkout the code
	uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r local-requirements.txt
          pip install -e .

      - name: Run your tests
        run: pytest

    - name: Upload reports #To upload the reports in reports folder
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-result
        path: target/reports
        
    - name: Deploy to GitHub Pages #To deploy the reports page in github pages (here give write permision in settings -- general-- give permission to read and write)
      if: always() #instead of always we can use if success -- if i want to exectue only during success
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: target/reports #path of the report page

        env:
          HOME: /root
